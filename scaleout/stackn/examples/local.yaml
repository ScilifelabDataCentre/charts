# Default values for alliance-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

### DEPLOY SECRETS WITH private helm chart 'secrets' from platform/secrets
## Name: imagePullSecret
## Description: Secret to pull images from our private repository.
imagePullSecrets:
  - name: regcred

## to create a regcred
## kubectl create secret docker-registry regcred --docker-server=<your-registry-server> --docker-username=<your-name> --docker-password=<your-pword>

# REQUIREMENT: set a storage class with ability to serve ReadWriteMany
# Name: storageClassName
# Description: Set a storage class for the resources that are reused for multi-mount-points in cluster. To reduce wasteful copying we allow to use the same dataset volume to be mounted multiple times.
# Default: microk8s-hostpath (works with docker-for-desktop)
storageClassName: microk8s-hostpath
namespace: default

studio:
  servicename: studio
  image: #tell which image to deploy for studio
    repository: scaleoutsystems/studio:develop # point to the latest beta image
    pullPolicy: Always # used to ensure that each time we redeploy always pull the latest image
  storage:
    StorageClassName: microk8s-hostpath
    size: 2Gi

# Enable ingress if you want your to access the studio solution from a kubernetes host/localhost.
domain: studio.127.0.0.1.nip.io
ingress:
  enabled: true
  image: #tell which image to deploy for studio
    repository: scaleoutsystems/ingress:master
    pullPolicy: Always
  annotations: {}
  hosts:
    - host: studio.127.0.0.1.nip.io

  # setup TLS if you have a platform certificate or use 'tls-acme' if you have certbot deployed and want to generate a certificate.
  tls:
    - secretName: prod-ingress
      hosts:
        - studio.127.0.0.1.nip.io


service:
  type: ClusterIP #override if you want to use NodePort instead to access cluster services

#override if you want to try out a HA (HIGH AVAILABILITY) setup.
replicaCount: 1

# override if certain resource requirements should apply
resources: {}

# override if certain nodes should be used for the deployed resources.
nodeSelector: {}

# override if declaring that some criteria is tolerated for resource co-existing.
tolerations: []

affinity: {}



# Postgres default credentials for backend DB. Override for security!
postgres:
  enabled: false
  db:
    name: postgres
    user: postgres
    password: postgres


# default credentials for rabbitmq. override in production!
rabbit:
  username: admin
  password: LJqEG9RE4FdZbVWoJzZIOQEI

chartcontroller:
  enabled: false
  image:
    repository: scaleoutsystems/chart-controller:develop
    pullPolicy: Always
  branch: develop



cluster_config: |-
  apiVersion: v1
  clusters:
  - cluster:
      certificate-authority-data: cert-auth-data=
      server: https://127.0.0.1:16443
    name: local
  contexts:
  - context:
      cluster: local
      user: admin
    name: local
  current-context: local
  kind: Config
  preferences: {}
  users:
  - name: admin
    user:
      token: your-token

docker-registry:
    enabled: true
    ingress:
        enabled: true
        annotations:
          nginx.ingress.kubernetes.io/proxy-body-size: "5500m"
        hosts:
            - registry.127.0.0.1.nip.io
        tls:
            - secretName: prod-ingress
              hosts:
                  - registry.127.0.0.1.nip.io

    persistence:
      enabled: true
      accessMode: ReadWriteOnce
      size: 2Gi
      storageClass: microk8s-hostpath

argo:
  enabled: false

argo-events:
  enabled: false


openfaas:
    enabled: false


keycloak:
  ingress:
    enabled: true
    annotations:
      nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    rules:
      - host: "keycloak.127.0.0.1.nip.io"
        paths: 
          - /
    tls:
      - secretName: prod-ingress
        hosts:
          - keycloak.127.0.0.1.nip.io
  persistence:
    deployPostgres: true
    dbVendor: postgres
    pullPolicy: Always

  extraVolumes: |
    - name: realm-secret
      secret:
        secretName: realm-secret

  extraVolumeMounts: |
    - name: realm-secret
      mountPath: "/realm/"
      readOnly: true

  extraEnv: |
    - name: KEYCLOAK_IMPORT
      value: /realm/realm.json
    - name: KEYCLOAK_USER
      value: keycloak_admin
    - name: KEYCLOAK_PASSWORD
      value: aFGMSDLKmfdskHJASd
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"

  postgresql:
    postgresqlUsername: keycloak
    postgresqlPassword: usOcCo+lh\TuIO:(p:Om9'
    postgresqlDatabase: keycloak
    persistence:
      enabled: true
      storageClass: microk8s-hostpath
      size: 2Gi
  
  args:
    - "-Dkeycloak.profile.feature.token_exchange=enabled"

oidc:
    enabled: true
    realm: STACKn
    client_id: studio
    client_secret: Q#cdsIA(2MDAKLS00caradsf<OLAL:KSDn(kvd 
    host: http://keycloak.127.0.0.1.nip.io
    sign_algo: RS256
    verify_ssl: false

prometheus:
  server:
    ingress:
      enabled: true
      hosts:
        - prometheus.127.0.0.1.nip.io
      tls:
        - secretName: prod-ingress
          hosts:
            - prometheus.127.0.0.1.nip.io
    persistentVolume:
      storageClass: microk8s-hostpath
      size: 2Gi

grafana:
  grafana.ini:
    server:
      domain: grafana.127.0.0.1.nip.io
      root_url: "%(protocol)s://%(domain)s/"
      serve_from_sub_path: true
  ingress:
    enabled: true
    hosts:
      - "grafana.127.0.0.1.nip.io"
    path: "/"

    tls:
        - secretName: prod-ingress
          hosts:
            - grafana.127.0.0.1.nip.io

  persistence:
    enabled: true
    type: pvc
    size: 2Gi
    storageClassName: microk8s-hostpath